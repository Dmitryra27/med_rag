# main.py –¥–ª—è Cloud Run (—Å Pinecone –∏ Vertex AI)
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import vertexai
from vertexai.language_models import TextEmbeddingModel
from vertexai.generative_models import GenerativeModel
import pinecone  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pinecone
from fastapi import Response
from google.cloud import storage
from google.oauth2 import service_account
import uvicorn
from datetime import datetime
from google.auth import default
from google.cloud import aiplatform
from fastapi.middleware.cors import CORSMiddleware
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
import logging

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
embedding_model = None
gemini_model = None
pinecone_index = None

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PROJECT_ID = os.environ.get("PROJECT_ID", "ai-project-26082025")
REGION = os.environ.get("REGION", "us-central1")
# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pinecone ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Cloud Run
PINECONE_API_KEY = os.environ.get("PINECONE_API_KEY")
#print("üöÄ  API KEY...", PINECONE_API_KEY)
PINECONE_INDEX_NAME = os.environ.get("PINECONE_INDEX_NAME", "med-index")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ Pinecone


def setup_authentication():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        credentials, project = default()
        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–µ–∫—Ç: {project}")

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not os.environ.get('GOOGLE_CLOUD_PROJECT'):
            os.environ['GOOGLE_CLOUD_PROJECT'] = project or 'ai-project-26082025'

        if not os.environ.get('GOOGLE_CLOUD_REGION'):
            os.environ['GOOGLE_CLOUD_REGION'] = 'us-central1'

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: gcloud auth application-default login")
        return False




# --- Lifespan handler –¥–ª—è FastAPI ---
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Medical RAG API...")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π!)
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PROJECT_ID –∏ REGION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    try:
        credentials = service_account.Credentials.from_service_account_file("ai-project-26082025-6a65bc63db88.json")
        storage_client = storage.Client(credentials=credentials)

        vertexai.init(project=PROJECT_ID, location=REGION)

        print("‚úÖ Vertex AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vertex AI: {e}")
        # –í production –ª—É—á—à–µ –±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
        # raise
        # –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        pass

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Vertex AI
    global embedding_model, gemini_model
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ
        embedding_model = TextEmbeddingModel.from_pretrained("text-embedding-005")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∏ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        gemini_model = GenerativeModel("gemini-2.5-pro")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ Vertex AI –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π Vertex AI: {e}")
        # –ö—Ä–∏—Ç–∏—á–Ω–æ, –±–µ–∑ –º–æ–¥–µ–ª–µ–π —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone
    global pinecone_index
    try:
        if not PINECONE_API_KEY:
            raise ValueError("PINECONE_API_KEY environment variable is not set.")
        if not PINECONE_INDEX_NAME:
            raise ValueError("PINECONE_INDEX_NAME environment variable is not set.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone (–Ω–æ–≤—ã–π SDK v5+)
        pc = pinecone.Pinecone(api_key=PINECONE_API_KEY)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É
        pinecone_index = pc.Index(PINECONE_INDEX_NAME)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
        index_stats = pinecone_index.describe_index_stats()
        print(
            f"‚úÖ Pinecone –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω–¥–µ–∫—Å '{PINECONE_INDEX_NAME}' —Å–æ–¥–µ—Ä–∂–∏—Ç {index_stats.get('total_vector_count', 0)} –≤–µ–∫—Ç–æ—Ä–æ–≤.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinecone: {e}")
        # –ö—Ä–∏—Ç–∏—á–Ω–æ, –±–µ–∑ –ë–î —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        raise

    print("üü¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.")
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # --- –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞) ---
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # Pinecone SDK –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è


# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI —Å lifespan handler ---
app = FastAPI(lifespan=lifespan, title="Medical RAG API", version="2.0.0-Pinecone")

# –î–æ–±–∞–≤—å—Ç–µ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã (GET, POST, OPTIONS –∏ —Ç.–¥.)
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    # –í production –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ origins:
    # allow_origins=["http://localhost:63342", "https://your-domain.com"],
)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---
@app.get("/")
async def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Pinecone –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    try:
        stats = pinecone_index.describe_index_stats()
        vector_count = stats.get('total_vector_count', 'N/A')
    except:
        vector_count = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'

    return {
        "status": "ok",
        "message": "Medical RAG API Server on Google Cloud Run (Pinecone + Vertex AI)",
        "version": "2.0.0-Pinecone",
        "pinecone_vectors": vector_count
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Pinecone - –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
        if pinecone_index is not None:
            stats = pinecone_index.describe_index_stats()
            pinecone_status = "healthy"
            vector_count = stats.get('total_vector_count', 0)
            dimension = stats.get('dimension', 'N/A')
        else:
            pinecone_status = "uninitialized"
            vector_count = 0
            dimension = 'N/A'

    except Exception as e:
        pinecone_status = "unhealthy"
        vector_count = 0
        dimension = 'N/A'
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Health check - Pinecone error: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vertex AI –º–æ–¥–µ–ª–∏
    embedding_model_status = "healthy" if embedding_model is not None else "uninitialized"
    gemini_model_status = "healthy" if gemini_model is not None else "uninitialized"

    return {
        "status": "healthy" if (
                    pinecone_status == "healthy" and embedding_model_status == "healthy" and gemini_model_status == "healthy") else "degraded",
        "components": {
            "pinecone": {
                "status": pinecone_status,
                "vector_count": vector_count,
                "dimension": dimension
            },
            "embedding_model": {
                "status": embedding_model_status
            },
            "gemini_model": {
                "status": gemini_model_status
            }
        },
        "timestamp": datetime.utcnow().isoformat() + "Z"
    }


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à main.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class QuestionRequest(BaseModel):
    question: str


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞
class AnswerResponse(BaseModel):
    question: str
    answer: str
    sources: list[str]


@app.post("/ask", response_model=AnswerResponse)
async def ask_question(request: QuestionRequest, response: Response):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
    """
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "Content-Type"
    try:
        question = request.question.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
        if not question:
            raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if len(question) > 1000:
            raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        if embedding_model is None:
            raise HTTPException(status_code=500, detail="–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        try:
            embedding_response = embedding_model.get_embeddings([question])
            question_embedding = embedding_response[0].values
            logger.info("–≠–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")

        # 2. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Pinecone
        if pinecone_index is None:
            raise HTTPException(status_code=500, detail="–ò–Ω–¥–µ–∫—Å Pinecone –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        try:
            search_results = pinecone_index.query(
                vector=question_embedding,
                top_k=3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                include_metadata=True
            )
            logger.info(f"–ü–æ–∏—Å–∫ –≤ Pinecone –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(search_results.matches)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Pinecone: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {str(e)}")

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        contexts = []
        sources = []

        if search_results.matches:
            for match in search_results.matches:
                metadata = match.metadata or {}
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
                text = metadata.get('text') or metadata.get('content') or metadata.get(
                    'preview') or f"–î–æ–∫—É–º–µ–Ω—Ç ID: {match.id}"
                contexts.append(text)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                source = metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                sources.append(source)
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            contexts.append("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
            sources.append("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Gemini
        if gemini_model is None:
            raise HTTPException(status_code=500, detail="–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            context_text = "\n\n".join(contexts)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            prompt = f"""
            –¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ–ø–∏—Ä–∞—è—Å—å –¢–û–õ–¨–ö–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
            –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.
            –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–∫–∞–∂–∏: "–Ø –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."

            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            {context_text}

            –í–æ–ø—Ä–æ—Å: {question}
            –û—Ç–≤–µ—Ç:
            """.strip()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = gemini_model.generate_content(prompt)
            answer = response.text.strip()

            logger.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if contexts and contexts[0] != "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.":
                answer = "–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + contexts[0][:500] + "..."
            else:
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."

        # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        return AnswerResponse(
            question=question,
            answer=answer,
            sources=sources
        )

    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /ask: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


if __name__ == "__main__":
    if not setup_authentication():
        exit(1)
    import uvicorn

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π Cloud Run
    port = int(os.environ.get("PORT", 8080))
    print(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    # –í–ê–ñ–ù–û: host –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "0.0.0.0" –¥–ª—è Cloud Run
    uvicorn.run(app, host="0.0.0.0", port=port)
