# main.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è Cloud Run
import os
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Response
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import vertexai
from vertexai.language_models import TextEmbeddingModel
from vertexai.generative_models import GenerativeModel
import pinecone
from datetime import datetime
import traceback # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å WARNING –∏–ª–∏ ERROR
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
embedding_model = None
gemini_model = None
pinecone_index = None

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PROJECT_ID = os.environ.get("PROJECT_ID", "ai-project-26082025")
REGION = os.environ.get("REGION", "us-central1")
# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pinecone ---
PINECONE_API_KEY = os.environ.get("PINECONE_API_KEY")
PINECONE_INDEX_NAME = os.environ.get("PINECONE_INDEX_NAME", "med-index") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ


# --- Lifespan handler –¥–ª—è FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    global embedding_model, gemini_model, pinecone_index
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Medical RAG API...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI
        # –í Cloud Run –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        # –ù–µ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª –∫–ª—é—á–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–µ—Ä–≤–∏—Å—É
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI: project={PROJECT_ID}, location={REGION}")
        vertexai.init(project=PROJECT_ID, location=REGION)
        logger.info("‚úÖ Vertex AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Vertex AI
        logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ text-embedding-005...")
        embedding_model = TextEmbeddingModel.from_pretrained("text-embedding-005")
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

        logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ gemini-2.5-pro...")
        gemini_model = GenerativeModel("gemini-2.5-pro") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone
        logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone...")
        if not PINECONE_API_KEY:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PINECONE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        if not PINECONE_INDEX_NAME:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PINECONE_INDEX_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

        pc = pinecone.Pinecone(api_key=PINECONE_API_KEY)
        pinecone_index = pc.Index(PINECONE_INDEX_NAME)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        index_stats = pinecone_index.describe_index_stats()
        logger.info(f"‚úÖ Pinecone –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω–¥–µ–∫—Å '{PINECONE_INDEX_NAME}' —Å–æ–¥–µ—Ä–∂–∏—Ç {index_stats.get('total_vector_count', 0)} –≤–µ–∫—Ç–æ—Ä–æ–≤.")
        logger.info(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {index_stats.get('dimension', 'N/A')}")

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"   Traceback: {traceback.format_exc()}")
        # –í production –º–æ–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
        # raise
        # –ù–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—É—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏
        embedding_model = None
        gemini_model = None
        pinecone_index = None

    logger.info("üü¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.")
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # --- –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI —Å lifespan handler ---
app = FastAPI(
    lifespan=lifespan,
    title="Medical RAG API",
    version="2.1.0-Pinecone-Fixed",
    description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å RAG"
)

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í production —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ origins.
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö ---
class QuestionRequest(BaseModel):
    question: str

class AnswerResponse(BaseModel):
    question: str
    answer: str
    sources: list[str]

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---
@app.get("/")
async def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        vector_count = 0
        if pinecone_index:
            try:
                stats = pinecone_index.describe_index_stats()
                vector_count = stats.get('total_vector_count', 'N/A')
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Pinecone –≤ /: {e}")
                vector_count = f"–û—à–∏–±–∫–∞: {e}"
        else:
            vector_count = "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        return {
            "status": "ok",
            "message": "Medical RAG API Server on Google Cloud Run (Pinecone + Vertex AI)",
            "version": "2.1.0-Pinecone-Fixed",
            "pinecone_vectors": vector_count,
            "models_initialized": {
                "embedding_model": embedding_model is not None,
                "gemini_model": gemini_model is not None,
                "pinecone_index": pinecone_index is not None
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Pinecone
        pinecone_status = "uninitialized"
        vector_count = 0
        dimension = 'N/A'
        if pinecone_index is not None:
            try:
                stats = pinecone_index.describe_index_stats()
                pinecone_status = "healthy"
                vector_count = stats.get('total_vector_count', 0)
                dimension = stats.get('dimension', 'N/A')
            except Exception as e:
                pinecone_status = "unhealthy"
                logger.error(f"Health check - Pinecone error: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        embedding_model_status = "healthy" if embedding_model is not None else "uninitialized"
        gemini_model_status = "healthy" if gemini_model is not None else "uninitialized"

        overall_status = "healthy"
        if pinecone_status != "healthy" or embedding_model_status != "healthy" or gemini_model_status != "healthy":
            overall_status = "degraded"
            if pinecone_status == "uninitialized" and embedding_model_status == "uninitialized" and gemini_model_status == "uninitialized":
                overall_status = "uninitialized"

        return {
            "status": overall_status,
            "components": {
                "pinecone": {
                    "status": pinecone_status,
                    "vector_count": vector_count,
                    "dimension": dimension
                },
                "embedding_model": {
                    "status": embedding_model_status
                },
                "gemini_model": {
                    "status": gemini_model_status
                }
            },
            "timestamp": datetime.utcnow().isoformat() + "Z"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /health: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/ask", response_model=AnswerResponse)
async def ask_question(request: QuestionRequest):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG.
    """
    question = request.question.strip()
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")

    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not question:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å")
        raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if len(question) > 1000:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ({len(question)} —Å–∏–º–≤–æ–ª–æ–≤)")
        raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if not embedding_model:
        logger.error("–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤: –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    if not gemini_model:
        logger.error("–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤: –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    if not pinecone_index:
        logger.error("–ò–Ω–¥–µ–∫—Å Pinecone –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤: –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    try:
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        logger.debug("üß† –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞...")
        embedding_response = embedding_model.get_embeddings([question])
        question_embedding = embedding_response[0].values
        logger.debug(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(question_embedding)})")

        # 4. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Pinecone
        logger.debug("üîç –ü–æ–∏—Å–∫ –≤ Pinecone...")
        search_results = pinecone_index.query(
            vector=question_embedding,
            top_k=3,
            include_metadata=True
        )
        logger.debug(f"   –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(search_results.matches)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        contexts = []
        sources = []
        if search_results.matches:
            for match in search_results.matches:
                metadata = match.metadata or {}
                # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ Pinecone
                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ 'text' –∏–ª–∏ 'content'
                text = metadata.get('text') or metadata.get('content') or f"–î–æ–∫—É–º–µ–Ω—Ç ID: {match.id}"
                contexts.append(text)
                source = metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                sources.append(source)
        else:
            logger.info("   –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
            contexts.append("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
            sources.append("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")

        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Gemini
        logger.debug("üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini...")
        context_text = "\n\n".join(contexts)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –º–æ–¥–µ–ª–∏
        prompt = f"""
        –¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ–ø–∏—Ä–∞—è—Å—å –¢–û–õ–¨–ö–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.
        –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–∫–∞–∂–∏: "–Ø –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."

        –ö–æ–Ω—Ç–µ–∫—Å—Ç:
        {context_text}

        –í–æ–ø—Ä–æ—Å: {question}
        –û—Ç–≤–µ—Ç:
        """.strip()

        gemini_response = gemini_model.generate_content(prompt)
        answer = gemini_response.text.strip()
        logger.debug("   –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")

        return AnswerResponse(
            question=question,
            answer=answer,
            sources=sources
        )

    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /ask: {e}")
        logger.error(f"   Traceback: {traceback.format_exc()}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 500 —Å –¥–µ—Ç–∞–ª—è–º–∏ (–≤ production –ª—É—á—à–µ —Å–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏)
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    import uvicorn
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π Cloud Run
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Uvicorn –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    # –í–ê–ñ–ù–û: host –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "0.0.0.0" –¥–ª—è Cloud Run
    uvicorn.run(app, host="0.0.0.0", port=port)
